name: Deploy to EC2 (Alternative)

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config
      
      - name: Stop application on EC2
        run: ssh ubuntu@ec2-3-220-149-40.compute-1.amazonaws.com "cd ~/event-webapp && pm2 stop event-webapp || true"
      
      - name: Setup environment and certificates on EC2
        run: |
          ssh ubuntu@ec2-3-220-149-40.compute-1.amazonaws.com "
            mkdir -p ~/event-webapp/certs
            if [ ! -f ~/event-webapp/certs/privatekey.pem ]; then
              sudo cp /etc/ssl/private/privatekey.pem ~/event-webapp/certs/
              sudo cp /etc/ssl/certs/server.crt ~/event-webapp/certs/
              sudo chown ubuntu:ubuntu ~/event-webapp/certs/*
            fi
            echo 'DATABASE_URL=postgresql://postgres:postgres@localhost:5432/event_app_prod' > ~/event-webapp/.env
          "
      
      - name: Build application locally
        run: |
          npm ci
          npx prisma generate
          npm run build
          
      - name: Package application
        run: |
          # Create server.js file
          cat > server.js << 'EOF'
          const { createServer } = require('https');
          const { parse } = require('url');
          const next = require('next');
          const fs = require('fs');

          const dev = process.env.NODE_ENV !== 'production';
          const app = next({ dev });
          const handle = app.getRequestHandler();

          const httpsOptions = {
            key: fs.readFileSync('./certs/privatekey.pem'),
            cert: fs.readFileSync('./certs/server.crt')
          };

          app.prepare().then(() => {
            createServer(httpsOptions, (req, res) => {
              const parsedUrl = parse(req.url, true);
              handle(req, res, parsedUrl);
            }).listen(8443, (err) => {
              if (err) throw err;
              console.log('> Ready on https://ec2-3-220-149-40.compute-1.amazonaws.com:8443');
            });
          });
          EOF
          
          tar -czf deploy.tar.gz .next node_modules package.json server.js
      
      - name: Deploy to EC2
        run: |
          scp deploy.tar.gz ubuntu@ec2-3-220-149-40.compute-1.amazonaws.com:~/deploy.tar.gz
          ssh ubuntu@ec2-3-220-149-40.compute-1.amazonaws.com "
            rm -rf ~/event-webapp/.next ~/event-webapp/node_modules
            tar -xzf ~/deploy.tar.gz -C ~/event-webapp
            cd ~/event-webapp
            pm2 restart event-webapp || pm2 start npm --name 'event-webapp' -- start
            pm2 save
          "